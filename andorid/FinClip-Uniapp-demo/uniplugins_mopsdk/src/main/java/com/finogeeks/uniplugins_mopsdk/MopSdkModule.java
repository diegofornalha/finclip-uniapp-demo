package com.finogeeks.uniplugins_mopsdk;import android.app.Activity;import android.app.Application;import android.content.Context;import android.graphics.Bitmap;import android.os.Bundle;import com.alibaba.fastjson.JSONObject;import com.alibaba.fastjson.TypeReference;import com.finogeeks.lib.applet.client.FinAppClient;import com.finogeeks.lib.applet.client.FinAppConfig;import com.finogeeks.lib.applet.client.FinAppInfo;import com.finogeeks.lib.applet.client.FinStoreConfig;import com.finogeeks.lib.applet.db.entity.FinApplet;import com.finogeeks.lib.applet.interfaces.FinCallback;import com.finogeeks.lib.applet.interfaces.ICallback;import com.finogeeks.lib.applet.page.view.moremenu.MoreMenuItem;import com.finogeeks.lib.applet.page.view.moremenu.MoreMenuType;import com.finogeeks.lib.applet.rest.model.GrayAppletVersionConfig;import com.finogeeks.lib.applet.sdk.api.IAppletApiManager;import com.finogeeks.lib.applet.sdk.api.IAppletHandler;import com.finogeeks.lib.applet.sdk.api.IAppletLifecycleCallback;import com.finogeeks.lib.applet.sdk.api.IExtensionApiManager;import com.finogeeks.lib.applet.sdk.api.IExtensionWebApiManager;import com.finogeeks.lib.applet.sdk.model.SearchAppletRequest;import com.finogeeks.lib.applet.sdk.model.SearchAppletResponse;import org.jetbrains.annotations.NotNull;import org.jetbrains.annotations.Nullable;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.UUID;import io.dcloud.feature.uniapp.annotation.UniJSMethod;import io.dcloud.feature.uniapp.bridge.UniJSCallback;import io.dcloud.feature.uniapp.common.UniModule;public class MopSdkModule extends UniModule {    private List<GrayAppletVersionConfig> grayAppletVersionConfigs = null;    private UniJSCallback onCloseButtonClicked = null;    private UniJSCallback onChooseAvatar = null;    private UniJSCallback onGetPhoneNumber = null;    private List<MoreMenuItem> registeredMoreMenuItems = null;    private UniJSCallback onRegisteredMoreMenuItemClicked = null;    private Map<String, String> useInfo = null;    private static Map<String, Object> callbackMap = new HashMap<>();    @UniJSMethod(uiThread = false)    public void initialize(@NotNull JSONObject options,                           UniJSCallback onSuccess,                           UniJSCallback onFail) {        try {            // 判断是否为小程序进程的代码放在最前面            if (FinAppClient.INSTANCE.isFinAppProcess(this.getApplication())) {                return;            }            FinAppConfig.Builder builder = null ;            FinAppConfig config  = null;            try {                String apiServer = options.getString("apiServer");                String apmServer = options.getString("apmServer");                if (apiServer == null || "".equals(apiServer)) {                    apiServer = apmServer;                }                JSONObject uiConfig = options.getJSONObject("uiConfig");                if (uiConfig != null) {                    JSONObject capsuleConfig = uiConfig.getJSONObject("capsuleConfig");                    if (capsuleConfig != null) {                        //胶囊背景颜色浅色                        String capsuleBgLightColor = capsuleConfig.getString("capsuleBgLightColor");                        capsuleConfig.remove("capsuleBgLightColor");                        if (capsuleBgLightColor != null && "".equals(capsuleBgLightColor)) {                            capsuleConfig.put("capsuleBgLightColor",                                    Integer.getInteger(capsuleBgLightColor, 16).intValue());                        }                        //胶囊背景颜色深色                        String capsuleBgDarkColor = capsuleConfig.getString("capsuleBgDarkColor");                        capsuleConfig.remove("capsuleBgDarkColor");                        if (capsuleBgDarkColor != null && "".equals(capsuleBgDarkColor)) {                            capsuleConfig.put("capsuleBgDarkColor",                                    Integer.getInteger(capsuleBgDarkColor, 16).intValue());                        }                        //右上角胶囊视图的边框浅色颜色                        String capsuleBorderLightColor = capsuleConfig.getString("capsuleBorderLightColor");                        capsuleConfig.remove("capsuleBorderLightColor");                        if (capsuleBorderLightColor != null && "".equals(capsuleBorderLightColor)) {                            capsuleConfig.put("capsuleBorderLightColor",                                    Integer.getInteger(capsuleBorderLightColor, 16).intValue());                        }                        //右上角胶囊视图的边框深色颜色                        String capsuleBorderDarkColor = capsuleConfig.getString("capsuleBorderDarkColor");                        capsuleConfig.remove("capsuleBorderDarkColor");                        if (capsuleBorderDarkColor != null && "".equals(capsuleBorderDarkColor)) {                            capsuleConfig.put("capsuleBorderDarkColor",                                    Integer.getInteger(capsuleBorderDarkColor, 16).intValue());                        }                        // 胶囊分割线浅色颜色                        String capsuleDividerLightColor = capsuleConfig.getString("capsuleDividerLightColor");                        capsuleConfig.remove("capsuleDividerLightColor");                        if (capsuleDividerLightColor != null && "".equals(capsuleDividerLightColor)) {                            capsuleConfig.put("capsuleDividerLightColor",                                    Integer.getInteger(capsuleDividerLightColor, 16).intValue());                        }                        // 胶囊分割线深色颜色                        String capsuleDividerDarkColor = capsuleConfig.getString("capsuleDividerDarkColor");                        capsuleConfig.remove("capsuleDividerDarkColor");                        if (capsuleDividerDarkColor != null && "".equals(capsuleDividerDarkColor)) {                            capsuleConfig.put("capsuleDividerDarkColor",                                    Integer.getInteger(capsuleDividerDarkColor, 16).intValue());                        }                    }                    JSONObject navHomeConfig = uiConfig.getJSONObject("navHomeConfig");                    if (navHomeConfig != null) {                        //返回首页按钮浅色边框颜色，默认0X80FFFFFF                        String borderLightColor = navHomeConfig.getString("borderLightColor");                        navHomeConfig.remove("borderLightColor");                        if (borderLightColor != null && "".equals(borderLightColor)) {                            navHomeConfig.put("borderLightColor",                                    Integer.getInteger(borderLightColor, 16).intValue());                        }                        //返回首页按钮深色边框颜色，默认0X26000000                        String borderDarkColor = navHomeConfig.getString("borderDarkColor");                        navHomeConfig.remove("borderDarkColor");                        if (borderDarkColor != null && "".equals(borderDarkColor)) {                            navHomeConfig.put("borderDarkColor",                                    Integer.getInteger(borderDarkColor, 16).intValue());                        }                        //返回首页按钮浅色背景，默认0x33000000                        String bgLightColor = navHomeConfig.getString("bgLightColor");                        navHomeConfig.remove("bgLightColor");                        if (bgLightColor != null && "".equals(bgLightColor)) {                            navHomeConfig.put("bgLightColor",                                    Integer.getInteger(bgLightColor, 16).intValue());                        }                        //返回首页按钮深色背景，默认0x33000000                        String bgDarkColor = navHomeConfig.getString("bgDarkColor");                        navHomeConfig.remove("bgDarkColor");                        if (bgLightColor != null && "".equals(bgDarkColor)) {                            navHomeConfig.put("bgDarkColor",                                    Integer.getInteger(bgDarkColor, 16).intValue());                        }                    }                }                builder = JSONObject.parseObject(options.toJSONString(),                          FinAppConfig.Builder.class);                if (apiServer != null && (apiServer.startsWith("https") ||  apiServer.startsWith("http"))) {                    builder.setApiUrl(apiServer);                }                config = builder.build();                if(config.getFinStoreConfigs() == null || config.getFinStoreConfigs().isEmpty()){                    Boolean encryptServerData = options.getBooleanValue("encryptServerData");                    List<FinStoreConfig> storeConfigs  = new ArrayList<>();                    FinStoreConfig storeConfig = new FinStoreConfig(                            config.getSdkKey(),   // SDK Key                            config.getSdkSecret(),   // SDK Secret                            config.getApiUrl(),   // 服务器地址                            config.getApmServer(),   // 数据上报服务器地址                            config.getApiPrefix(),   // 服务器接口请求路由前缀                            config.getSdkFingerprint(), // SDK指纹                            config.getEncryptionType(),  // 加密方式，国密:SM，md5: MD5,                            encryptServerData == null ? false : encryptServerData                    );                    storeConfigs.add(storeConfig);                    builder.setFinStoreConfigs(storeConfigs);                    config = builder.build();                }            }catch (Exception e) {                JSONObject data = new JSONObject();                data.put("code", "fail");                data.put("msg", "初始化参数错误");                if(onFail != null) onFail.invoke(data);            }            FinAppClient.INSTANCE.init(this.getApplication(), config, new FinCallback<Object>() {                @Override                public void onSuccess(Object o) {                    if(onSuccess != null) onSuccess.invoke(o);                }                @Override                public void onError(int i, String s) {                    JSONObject data = new JSONObject();                    data.put("code", i);                    data.put("msg", s);                    if(onFail != null) onFail.invoke(data);                }                @Override                public void onProgress(int i, String s) { }            });            FinAppClient.INSTANCE.getAppletApiManager().setAppletHandler(new IAppletHandler() {                @Override                public boolean launchApp(@Nullable String appId) {                    return false;                }                @Override                public boolean feedback(@NotNull Bundle bundle) {                    return false;                }                @Override                public boolean contact(@NotNull org.json.JSONObject jsonObject) {                    return false;                }                @Override                public void shareAppMessage(@NotNull String appId,                                            @Nullable Bitmap bitmap,                                            @NotNull IAppletCallback iAppletCallback) {                }                @Nullable                @Override                public List<MoreMenuItem> getRegisteredMoreMenuItems(@NotNull String appId) {                    return MopSdkModule.this.registeredMoreMenuItems;                }                @Override                public void onRegisteredMoreMenuItemClicked(@NotNull  String appId,                                                            @NotNull  String path,                                                            @NotNull  String menuItemId,                                                            @Nullable String appInfo,                                                            @Nullable Bitmap bitmap,                                                            @NotNull IAppletCallback iAppletCallback) {                    if (MopSdkModule.this.onRegisteredMoreMenuItemClicked != null) {                        MopSdkModule.addExtensionCallBack(iAppletCallback);                        JSONObject options = new JSONObject();                        options.put("appId", appId);                        options.put("path", path);                        options.put("menuItemId", appInfo);                        options.put("appInfo", appInfo);                        //options.put("bitmap", bitmap);                        MopSdkModule.this.onRegisteredMoreMenuItemClicked.invokeAndKeepAlive(options);                    }                }                @Override                public void getPhoneNumber(@NotNull IAppletCallback iAppletCallback) {                    if (MopSdkModule.this.onGetPhoneNumber != null) {                        MopSdkModule.addExtensionCallBack(iAppletCallback);                        MopSdkModule.this.onGetPhoneNumber.invokeAndKeepAlive(null);                    }                }                @Override                public void chooseAvatar(@NotNull IAppletCallback iAppletCallback) {                    if (MopSdkModule.this.onChooseAvatar != null) {                        MopSdkModule.addExtensionCallBack(iAppletCallback);                        MopSdkModule.this.onChooseAvatar.invokeAndKeepAlive(null);                    }                }                @Nullable                @Override                public Map<String, String> getUserInfo() {                    return MopSdkModule.this.useInfo;                }                @Nullable                @Override                public List<GrayAppletVersionConfig> getGrayAppletVersionConfigs(@NotNull String code) {                    return MopSdkModule.this.grayAppletVersionConfigs;                }                @Override                public void onNavigationBarCloseButtonClicked(@NotNull String appId) {                    if (MopSdkModule.this.onCloseButtonClicked != null) {                        MopSdkModule.this.onCloseButtonClicked.invokeAndKeepAlive(appId);                    }                }            });        }catch (Exception e) {            e.printStackTrace();            JSONObject data = new JSONObject();            data.put("code", "error");            data.put("msg", "初始化异常");            if(onFail != null) onFail.invoke(data);        }    }    //设置灰度发布    @UniJSMethod(uiThread = false)    public void setGrayAppletVersionConfigs(@NotNull JSONObject options,                                            UniJSCallback onSuccess,                                            UniJSCallback onFail) {        try {            this.grayAppletVersionConfigs = JSONObject.parseArray(options.toJSONString(),                    GrayAppletVersionConfig.class);            if(onSuccess != null) onSuccess.invoke("success");        }catch (Exception e) {            if(onFail != null) onFail.invoke("fail");        }    }    //设置关闭按钮监听    @UniJSMethod(uiThread = false)    public void setNavigationBarCloseButtonClicked(@NotNull UniJSCallback onCloseButtonClicked) {        this.onCloseButtonClicked = onCloseButtonClicked;    }    //设置用户信息    @UniJSMethod(uiThread = false)    public void setUserInfo(@NotNull JSONObject options,                            UniJSCallback onSuccess,                            UniJSCallback onFail) {        try{            this.useInfo  = JSONObject.parseObject(options.toJSONString(), new TypeReference<Map<String, String>>(){});            if(onSuccess != null){                JSONObject params = new JSONObject();                options.put("code", "success");                if (onSuccess != null) onSuccess.invoke(params);            }        }catch (Exception e) {            if(onFail != null){                JSONObject params = new JSONObject();                options.put("code", "fail");                if (onFail != null) onFail.invoke(params);            }        }    }    //设置获取头像    @UniJSMethod(uiThread = false)    public void setChooseAvatar(UniJSCallback onChooseAvatar) {        this.onChooseAvatar = onChooseAvatar;    }    //设置获取头像手机号    @UniJSMethod(uiThread = false)    public void setGetPhoneNumber(UniJSCallback onGetPhoneNumber){        this.onGetPhoneNumber = onGetPhoneNumber;    }    //设置菜单    @UniJSMethod(uiThread = false)    public void setRegisteredMoreMenuItems(            JSONObject registeredMoreMenuItems,            UniJSCallback onRegisteredMoreMenuItemClicked){        try {            this.registeredMoreMenuItems  = JSONObject.parseArray(registeredMoreMenuItems.toJSONString(),                    MoreMenuItem.class);        }catch (Exception e) {}        this.onRegisteredMoreMenuItemClicked = onRegisteredMoreMenuItemClicked;    }    //设置生命周期    @UniJSMethod(uiThread = false)    public void setAppletLifecycleCallback(UniJSCallback onInitComplete,                                           UniJSCallback onFailure,                                           UniJSCallback onCreate,                                           UniJSCallback onStart,                                           UniJSCallback onResume,                                           UniJSCallback onPause,                                           UniJSCallback onStop,                                           UniJSCallback onDestroy) {        this.getApi().setAppletLifecycleCallback(new IAppletLifecycleCallback() {            @Override            public void onCreate(@NotNull String appId) {                JSONObject options = new JSONObject();                options.put("appId", appId);                if (onCreate != null)                    onCreate.invokeAndKeepAlive(appId);            }            @Override            public void onInitComplete(@NotNull String appId) {                JSONObject options = new JSONObject();                options.put("appId", appId);                if (onInitComplete != null)                    onInitComplete.invokeAndKeepAlive(options);            }            @Override            public void onStart(@NotNull String appId) {                JSONObject options = new JSONObject();                options.put("appId", appId);                if (onStart != null)                    onStart.invokeAndKeepAlive(options);            }            @Override            public void onResume(@NotNull String appId) {                JSONObject options = new JSONObject();                options.put("appId", appId);                if (onResume != null)                    onResume.invokeAndKeepAlive(options);            }            @Override            public void onPause(@NotNull String appId) {                JSONObject options = new JSONObject();                options.put("appId", appId);                if (onPause != null)                    onPause.invokeAndKeepAlive(options);            }            @Override            public void onStop(@NotNull String appId) {                JSONObject options = new JSONObject();                options.put("appId", appId);                if (onStop != null)                    onStop.invokeAndKeepAlive(options);            }            @Override            public void onDestroy(@NotNull String appId) {                JSONObject options = new JSONObject();                options.put("appId", appId);                if (onDestroy != null)                    onDestroy.invokeAndKeepAlive(options);            }            @Override            public void onFailure(@NotNull String appId, @NotNull String code) {                JSONObject options = new JSONObject();                options.put("appId", appId);                options.put("code", code);                if (onFailure != null)                    onFailure.invokeAndKeepAlive(options);            }        });    }    /**     * 获取当前小程序 appId信息     * @return string     */    @UniJSMethod(uiThread = true)    public String currentAppletId() {        return this.getApi().getCurrentAppletId();    }    /**     * 获取当前小程序信息     * @return JSONObject     */    @UniJSMethod(uiThread = true)    public JSONObject currentApplet() {        String appId = this.getApi().getCurrentAppletId();        FinAppInfo  appInfo = this.getApi().getAppletInfo(appId);        try {            return JSONObject.parseObject(JSONObject.toJSONString(appInfo));        }catch (Exception e){}        return null;    }    /**     * 打开小程序     * @param apiServer 小程序所在应用市场的服务器地址     * @param appId 小程序id     * @param startParams 启动小程序时携带的参数     * @param sequence 小程序的上架序列号     */    @UniJSMethod(uiThread = false)    public void openApplet(@NotNull String apiServer,                           @NotNull String appId,                           JSONObject startParams,                           Integer sequence) {        FinAppInfo.StartParams options = null;        try {            options = JSONObject.parseObject(startParams.toJSONString(),                    FinAppInfo.StartParams.class);        }catch (Exception e){}        this.getApi().startApplet(this.getContext(),                apiServer,                appId,                sequence,                options);    }    /**     * 打开二维码小程序     *     * @param qrCode 小程序所在应用市场的服务器地址     * @param onSuccess 打开成功回调     * @param onFail 打开失败回调     */    @UniJSMethod(uiThread = false)    public void openAppletByQrcode(@NotNull String qrCode,                                   UniJSCallback onSuccess,                                   UniJSCallback onFail,                                   UniJSCallback onProgress) {        this.getApi().startAppletByQrcode(this.getApplication(), qrCode, new FinCallback<String>() {            @Override            public void onSuccess(String code) {                JSONObject data = new JSONObject();                data.put("code", code);                if(onSuccess != null) onSuccess.invoke(data);            }            @Override            public void onError(int code, String message) {                JSONObject options = new JSONObject();                options.put("code", code);                options.put("message", message);                if(onFail != null) onFail.invoke(options);            }            @Override            public void onProgress(int code, String message) {                JSONObject options = new JSONObject();                options.put("code", code);                options.put("message", message);                if(onProgress != null) onProgress.invoke(options);            }        });    }    /**     * 搜索小程序     * @return     */    @UniJSMethod(uiThread = true)    public void seachApplets(@NotNull JSONObject options,                             UniJSCallback onSuccess,                             UniJSCallback onFail,                             UniJSCallback onProgress) {        try {            SearchAppletRequest request = JSONObject.parseObject(options.toJSONString(),                    SearchAppletRequest.class);             this.getApi().searchApplet(request, new FinCallback<SearchAppletResponse>() {                 @Override                 public void onSuccess(SearchAppletResponse searchAppletResponse) {                     if (onSuccess != null) {                         onSuccess.invokeAndKeepAlive(searchAppletResponse);                     }                 }                 @Override                 public void onError(int code, String message) {                     if (onFail != null) {                         JSONObject options = new JSONObject();                         options.put("code", code);                         options.put("message", message);                         onFail.invokeAndKeepAlive(options);                     }                 }                 @Override                 public void onProgress(int code, String message) {                     if (onProgress != null) {                         JSONObject options = new JSONObject();                         options.put("code", code);                         options.put("message", message);                         onProgress.invokeAndKeepAlive(options);                     }                 }             });        }catch (Exception e) {}    }    /**     * 关闭小程序 小程序会在内存中存在     * @params appId     */    @UniJSMethod(uiThread = false)    public void closeApplet(@NotNull String appId) {        this.getApi().closeApplet(appId);    }    /**     * 关闭所有小程序信息     */    @UniJSMethod(uiThread = false)    public void closeApplets() {       this.getApi().closeApplets();    }    /**     * 结束小程序信息     */    @UniJSMethod(uiThread = false)    public void finishRunningApplet(@NotNull String appId) {        this.getApi().finishRunningApplet(appId);    }    /**     * 结束所有小程序信息     */    @UniJSMethod(uiThread = false)    public void finishAllRunningApplets() {        this.getApi().finishAllRunningApplets();    }    /**     * 清除所有小程序缓存信息     */    @UniJSMethod(uiThread = false)    public void clearApplets() {        this.getApi().clearApplets();    }    /**     * 原生发送事件给小程序     * @params appId     * @params options     * **/    @UniJSMethod(uiThread = false)    public void sendCustomEvent(@NotNull String appId, @NotNull JSONObject options) {        this.getApi().sendCustomEvent(appId, options == null ? null : options.toJSONString());    }    /**     * 原生发送事件给所有小程序     * @params options     * **/    @UniJSMethod(uiThread = false)    public void sendCustomEventToAll(@NotNull JSONObject options) {        List<FinApplet> list  = this.getApi().getUsedApplets();        for (FinApplet applet:                list) {            this.sendCustomEvent(applet.getId(),options);        }    }    /**     * 原生调用webview中的js方法     * @params appId小程序id     * @params eventName 方法名     * @params webviewId 小程序的webviewId     * @params options 参数     */    @UniJSMethod(uiThread = false)    public void callJS(@NotNull String appId,                       @NotNull String eventName,                       @NotNull Integer webViewId,                       @NotNull JSONObject options,                       UniJSCallback onSuccess,                       UniJSCallback onFail,                       UniJSCallback onProgress) {        this.getApi().callJS(appId, eventName, options == null ? null : options.toJSONString(), webViewId, new FinCallback<String>() {            @Override            public void onSuccess(String code) {                JSONObject options = new JSONObject();                options.put("code", code);                if(onSuccess != null) onSuccess.invoke(code);            }            @Override            public void onError(int code, String message) {                JSONObject data = new JSONObject();                data.put("code", code);                data.put("message", message);                if(onFail != null) onFail.invoke(data);            }            @Override            public void onProgress(int code, String message) {                JSONObject data = new JSONObject();                data.put("code", code);                data.put("message", message);                if(onProgress != null) onProgress.invoke(data);            }        });    }    @UniJSMethod(uiThread = false)    public void registerExtensionApi(@NotNull String name, @NotNull UniJSCallback handler) {        this.getExtensionApi().registerApi(new MopSdkExtensionApi(this.getApplication(),name,handler) );    }    @UniJSMethod(uiThread = false)    public void registerWebExtentionApi(@NotNull String name, @NotNull UniJSCallback handler) {        this.getWebExtensionApi().registerApi(new MopSdkExtensionApi(this.getApplication(),name,handler) );    }    @UniJSMethod(uiThread = false)    public void onSuccess(@NotNull String uuid,@NotNull JSONObject options) {        Object object = MopSdkModule.callbackMap.get(uuid);        if (object != null) {            if (options != null) {                try {                    if (object instanceof  ICallback) {                        ICallback iCallback = (ICallback) object;                        iCallback.onSuccess(new org.json.JSONObject(options.toJSONString()));                    } else if (object instanceof IAppletHandler.IAppletCallback){                        IAppletHandler.IAppletCallback iCallback = (IAppletHandler.IAppletCallback) object;                        iCallback.onSuccess(new org.json.JSONObject(options.toJSONString()));                    }                }catch (Exception e) {                }            }            MopSdkModule.callbackMap.put(uuid, null);        }    }    @UniJSMethod(uiThread = false)    public void onFail(@NotNull String uuid,JSONObject options) {        Object object = MopSdkModule.callbackMap.get(uuid);        if (object != null) {            if (options != null) {                try {                    if (object instanceof ICallback) {                        ICallback iCallback = (ICallback) object;                        iCallback.onFail(new org.json.JSONObject(options.toJSONString()));                    } else if (object instanceof IAppletHandler.IAppletCallback) {                        IAppletHandler.IAppletCallback iCallback = (IAppletHandler.IAppletCallback) object;                        iCallback.onFailure();                    }                } catch (Exception e){}            }else{                if (object instanceof  ICallback) {                    ICallback iCallback = (ICallback) object;                    iCallback.onFail();                } else if (object instanceof IAppletHandler.IAppletCallback){                    IAppletHandler.IAppletCallback iCallback = (IAppletHandler.IAppletCallback) object;                    iCallback.onFailure();                }            }            MopSdkModule.callbackMap.put(uuid, null);        }    }    private Context getContext() {        return this.mUniSDKInstance.getContext();    }    private Application getApplication() {        return ((Activity) this.getContext()).getApplication();    }    private IAppletApiManager getApi(){        return FinAppClient.INSTANCE.getAppletApiManager();    }    private IExtensionApiManager getExtensionApi(){        return FinAppClient.INSTANCE.getExtensionApiManager();    }    private IExtensionWebApiManager getWebExtensionApi(){        return FinAppClient.INSTANCE.getExtensionWebApiManager();    }    public  static String addExtensionCallBack(Object iCallback) {        String uuid = UUID.randomUUID().toString();        MopSdkModule.callbackMap.put(uuid, iCallback);        return uuid;    }}